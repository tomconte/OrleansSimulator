#if !EXCLUDE_CODEGEN
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
[assembly: Orleans.ClientProxyAttribute()]
#pragma warning disable 1591
#pragma warning disable 693

namespace GrainInterfaces
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using Orleans.Coordination;
    using Orleans.RuntimeCore;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SimulatorGrainFactory
    {
        

                        public static ISimulatorGrain GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(ISimulatorGrain), -788366214, primaryKey));
                        }

                        public static ISimulatorGrain GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(ISimulatorGrain), -788366214, primaryKey));
                        }

            public static ISimulatorGrain Cast(IAddressable grainRef)
            {
                return SimulatorGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.Runtime.GrainReferenceAttribute("GrainInterfaces.ISimulatorGrain")]
        internal class SimulatorGrainReference : Orleans.GrainReference, ISimulatorGrain, Orleans.IAddressable
        {
            

            public static ISimulatorGrain Cast(IAddressable grainRef)
            {
                return (ISimulatorGrain) GrainReference.CastInternal(typeof(ISimulatorGrain), (GrainReference gr) => { return new SimulatorGrainReference(gr);}, grainRef, -788366214);
            }

                protected override int InterfaceId { get { return -788366214; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "GrainInterfaces.ISimulatorGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return SimulatorGrainMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal SimulatorGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                SimulatorGrainReference input = ((SimulatorGrainReference)(original));
                return ((SimulatorGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                SimulatorGrainReference input = ((SimulatorGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return SimulatorGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task StartSimulation(int id, GrainInterfaces.IManagerGrain managerGrain)
            {

                AsyncValue<object> invoke = base.InvokeMethod( 829770303, new object[] {id, managerGrain is GrainBase ? ManagerGrainFactory.Cast(managerGrain.AsReference()) : managerGrain});
                return invoke.AsTask();
            }
            
            public System.Threading.Tasks.Task StopSimulation()
            {

                AsyncValue<object> invoke = base.InvokeMethod( -1165576126, new object[] {});
                return invoke.AsTask();
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [Orleans.Runtime.MethodInvokerAttribute("GrainInterfaces.ISimulatorGrain")]
        private class SimulatorGrainMethodInvoker : IGrainMethodInvoker
        {
            
            static SimulatorGrainMethodInvoker()
            {
                Orleans.Serialization.SerializationManager.Register(typeof(SimulatorGrainMethodInvoker));
            }
            
            public AsyncCompletion Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
            {
                if (grain == null) throw new System.ArgumentNullException("grain");
                #pragma warning disable 219
                Orleans.AsyncCompletion r=null;
                switch (interfaceId)
                {
                    case -788366214:  // ISimulatorGrain
                        switch (methodId)
                        {
                            case 829770303: 
                                return AsyncCompletion.FromTask(((ISimulatorGrain)grain).StartSimulation((Int32)arguments[0], (IManagerGrain)arguments[1]));
                            case -1165576126: 
                                return AsyncCompletion.FromTask(((ISimulatorGrain)grain).StopSimulation());
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
                #pragma warning restore 219
            }
            
            public static string GetMethodName(int interfaceId, int methodId)
            {

            switch (interfaceId)
            {
                
                case -788366214:  // ISimulatorGrain
                    switch (methodId)
                    {
                        case 829770303:
                            return "StartSimulation";
                    case -1165576126:
                            return "StopSimulation";
                    case -1274273377:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [System.SerializableAttribute()]
    [Orleans.Runtime.ExtensionMethodAttribute("GrainInterfaces.ISimulatorGrain")]
    public static class SimulatorGrainExtensionMethods
    {
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SimulatorGrainProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ManagerGrainFactory
    {
        

                        public static IManagerGrain GetGrain(long primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IManagerGrain), -1211692310, primaryKey));
                        }

                        public static IManagerGrain GetGrain(Guid primaryKey)
                        {
                            return Cast(GrainFactoryBase.MakeGrainReferenceInternal(typeof(IManagerGrain), -1211692310, primaryKey));
                        }

            public static IManagerGrain Cast(IAddressable grainRef)
            {
                return ManagerGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.Runtime.GrainReferenceAttribute("GrainInterfaces.IManagerGrain")]
        internal class ManagerGrainReference : Orleans.GrainReference, IManagerGrain, Orleans.IAddressable
        {
            

            public static IManagerGrain Cast(IAddressable grainRef)
            {
                return (IManagerGrain) GrainReference.CastInternal(typeof(IManagerGrain), (GrainReference gr) => { return new ManagerGrainReference(gr);}, grainRef, -1211692310);
            }

                protected override int InterfaceId { get { return -1211692310; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "GrainInterfaces.IManagerGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return ManagerGrainMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal ManagerGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ManagerGrainReference input = ((ManagerGrainReference)(original));
                return ((ManagerGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ManagerGrainReference input = ((ManagerGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ManagerGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task StartSimulators(int start, int count, GrainInterfaces.ISimulationObserver observer)
            {
GrainFactoryBase.CheckGrainObserverParamInternal(observer);

                AsyncValue<object> invoke = base.InvokeMethod( -1997822298, new object[] {start, count, observer is GrainBase ? SimulationObserverFactory.Cast(observer.AsReference()) : observer});
                return invoke.AsTask();
            }
            
            public System.Threading.Tasks.Task ReportResults(int results)
            {

                AsyncValue<object> invoke = base.InvokeMethod( -861552654, new object[] {results});
                return invoke.AsTask();
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [Orleans.Runtime.MethodInvokerAttribute("GrainInterfaces.IManagerGrain")]
        private class ManagerGrainMethodInvoker : IGrainMethodInvoker
        {
            
            static ManagerGrainMethodInvoker()
            {
                Orleans.Serialization.SerializationManager.Register(typeof(ManagerGrainMethodInvoker));
            }
            
            public AsyncCompletion Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
            {
                if (grain == null) throw new System.ArgumentNullException("grain");
                #pragma warning disable 219
                Orleans.AsyncCompletion r=null;
                switch (interfaceId)
                {
                    case -1211692310:  // IManagerGrain
                        switch (methodId)
                        {
                            case -1997822298: 
                                return AsyncCompletion.FromTask(((IManagerGrain)grain).StartSimulators((Int32)arguments[0], (Int32)arguments[1], (ISimulationObserver)arguments[2]));
                            case -861552654: 
                                return AsyncCompletion.FromTask(((IManagerGrain)grain).ReportResults((Int32)arguments[0]));
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
                #pragma warning restore 219
            }
            
            public static string GetMethodName(int interfaceId, int methodId)
            {

            switch (interfaceId)
            {
                
                case -1211692310:  // IManagerGrain
                    switch (methodId)
                    {
                        case -1997822298:
                            return "StartSimulators";
                    case -861552654:
                            return "ReportResults";
                    case -1274273377:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [System.SerializableAttribute()]
    [Orleans.Runtime.ExtensionMethodAttribute("GrainInterfaces.IManagerGrain")]
    public static class ManagerGrainExtensionMethods
    {
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ManagerGrainProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SimulationObserverFactory
    {
        

            public static ISimulationObserver Cast(IAddressable grainRef)
            {
                return SimulationObserverReference.Cast(grainRef);
            }

        private static IGrainMethodInvoker methodInvoker;

        public async static System.Threading.Tasks.Task<ISimulationObserver> CreateObjectReference(ISimulationObserver obj)
        {
            if (methodInvoker == null) methodInvoker = new SimulationObserverMethodInvoker();
            return SimulationObserverFactory.Cast(await GrainReference.CreateObjectReference(obj, methodInvoker));
        }

        public static void DeleteObjectReference(ISimulationObserver reference)
        {
            GrainReference.DeleteObjectReference(reference);
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.Runtime.GrainReferenceAttribute("GrainInterfaces.ISimulationObserver")]
        internal class SimulationObserverReference : Orleans.GrainReference, ISimulationObserver, Orleans.IAddressable
        {
            

            public static ISimulationObserver Cast(IAddressable grainRef)
            {
                return (ISimulationObserver) GrainReference.CastInternal(typeof(ISimulationObserver), (GrainReference gr) => { return new SimulationObserverReference(gr);}, grainRef, 1674365866);
            }

                protected override int InterfaceId { get { return 1674365866; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "GrainInterfaces.ISimulationObserver"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return SimulationObserverMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal SimulationObserverReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                SimulationObserverReference input = ((SimulationObserverReference)(original));
                return ((SimulationObserverReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                SimulationObserverReference input = ((SimulationObserverReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return SimulationObserverReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public void ReportResults(int result)
            {

                base.InvokeOneWayMethod(
                    -861552654,
                    new object[] {result});
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [Orleans.Runtime.MethodInvokerAttribute("GrainInterfaces.ISimulationObserver")]
        private class SimulationObserverMethodInvoker : IGrainMethodInvoker
        {
            
            static SimulationObserverMethodInvoker()
            {
                Orleans.Serialization.SerializationManager.Register(typeof(SimulationObserverMethodInvoker));
            }
            
            public AsyncCompletion Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
            {
                if (grain == null) throw new System.ArgumentNullException("grain");
                #pragma warning disable 219
                Orleans.AsyncCompletion r=null;
                switch (interfaceId)
                {
                    case 1674365866:  // ISimulationObserver
                        switch (methodId)
                        {
                            case -861552654: 
                                ((ISimulationObserver)grain).ReportResults((Int32)arguments[0]); return AsyncCompletion.Done;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
                #pragma warning restore 219
            }
            
            public static string GetMethodName(int interfaceId, int methodId)
            {

            switch (interfaceId)
            {
                
                case 1674365866:  // ISimulationObserver
                    switch (methodId)
                    {
                        case -861552654:
                            return "ReportResults";
                    case -1274273377:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [System.SerializableAttribute()]
    [Orleans.Runtime.ExtensionMethodAttribute("GrainInterfaces.ISimulationObserver")]
    public static class SimulationObserverExtensionMethods
    {
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-ClientGenerator", "1.0.690.37044")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class SimulationObserverProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
}
#endif
